# Inspection Build Workflow Template
#
# This workflow builds an inspection image from the given Specification
# Additionally, it mounts an artifact repository to store the resulting artifacts.
#
# The ouputs are stored in s3 as such:
# s3://<bucket>/<prefix>/<workflow-name>/<workflow-step>
#
# NOTE: The artifact repository has to be configured via ConfigMap, see
# https://github.com/argoproj/argo/blob/master/ARTIFACT_REPO.md
# or use the Argo ansible role: https://github.com/CermakM/ansible-role-argo-workflows 
#
# successCondition: `n` pods have finished successfully and are present in the cluster
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: inspection-build-template
  labels:
    mark: cleanup
spec:
  entrypoint: main

  templates:
  - name: main
    inputs:
      parameters:
      # Required
      - name: inspection-id
      - name: specification
      - name: thoth-infra-namespace
      # Defaults
      - name: cpu
        value: "500m"
      - name: memory
        value: "1Gi"
      - name: registry
        value: 172.30.1.1:5000  # FIXME: docker-registry.default.svc:5000
      - name: thoth-registry
        value: 172.30.1.1:5000  # FIXME: docker-registry.default.svc:5000
    steps:
    - - name: dockerfile
        arguments:
          parameters:
          - name: specification
            value: "{{inputs.parameters.specification}}"
        template: create-dockerfile
    - - name: imagestream
        arguments:
          parameters:
          - name: inspection-id
            value: "{{inputs.parameters.inspection-id}}"
        template: create-imagestream
    - - name: buildconfig
        arguments:
          parameters:
          - name: dockerfile
            value: '{{steps.create-dockerfile.outputs.parameters.dockerfile}}'
          - name: inspection-id
            value: "{{inputs.parameters.inspection-id}}"
          - name: specification
            value: "{{inputs.parameters.specification}}"
          - name: cpu
            value: "{{inputs.parameters.cpu}}"
          - name: memory
            value: "{{inputs.parameters.memory}}"
        template: create-buildconfig
    - - name: build
        arguments:
          parameters:
          - name: inspection-id
            value: "{{inputs.parameters.inspection-id}}"
        template: await-build

  - name: create-dockerfile
    inputs:
      artifacts:
      - name: dockerfile-mock  # FIXME: Debug
        path: "/tmp/Dockerfile.mock"
        raw:
          data: 'FROM fedora:28\n\nUSER root\n\n\nRUN { { [ -f ''/usr/bin/dnf'' ] && INSTALL_CMD=''dnf install -y''; } || { [ -f ''/usr/bin/yum'' ] && INSTALL_CMD=''yum install -y''; } || { INSTALL_CMD=''apt-get install''; } };\\\neval $INSTALL_CMD  which libstdc++\n\n\nRUN pip3 install pipenv\n\n\nRUN echo -e \"string\" >\"string\"\n\nRUN mkdir -p /home/amun && chmod -R 777 /home/amun\n\nRUN echo -e \"[[source]]\\n\\\nurl = \\\"https://pypi.org/simple\\\"\\n\\\nverify_ssl = true\\n\\\nname = \\\"pypi-org\\\"\\n\\\n\\n\\\n[dev-packages]\\n\\\n\\n\\\n[requires]\\n\\\npython_version = \\\"3.6\\\"\\n\\\n\\n\\\n[packages.tensorflow]\\n\\\nindex = \\\"pypi-org\\\"\\n\\\nversion = \\\"==1.13.1\\\"\\n\\\n\" >\"/home/amun/Pipfile\"\n\nRUN echo -e \"{\\n\\\n    \\\"_meta\\\": {\\n\\\n        \\\"hash\\\": {\\n\\\n            \\\"sha256\\\": \\\"5e1728eac2417d91a3759d640ee70352b34cdccf27db800b3693cb4f8c507aa2\\\"\\n\\\n        },\\n\\\n        \\\"pipfile-spec\\\": 6,\\n\\\n        \\\"requires\\\": {\\n\\\n            \\\"python_version\\\": \\\"3.6\\\"\\n\\\n        },\\n\\\n        \\\"sources\\\": [\\n\\\n            {\\n\\\n                \\\"name\\\": \\\"pypi-org\\\",\\n\\\n                \\\"url\\\": \\\"https://pypi.org/simple\\\",\\n\\\n                \\\"verify_ssl\\\": true\\n\\\n            }\\n\\\n        ]\\n\\\n    },\\n\\\n    \\\"default\\\": {\\n\\\n        \\\"absl-py\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:b943d1c567743ed0455878fcd60bc28ac9fae38d129d1ccfad58079da00b8951\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==0.7.1\\\"\\n\\\n        },\\n\\\n        \\\"astor\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:0e41295809baf43ae8303350e031aff81ae52189b6f881f36d623fa8b2f1960e\\\",\\n\\\n                \\\"sha256:37a6eed8b371f1228db08234ed7f6cfdc7817a3ed3824797e20cbb11dc2a7862\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==0.8.0\\\"\\n\\\n        },\\n\\\n        \\\"gast\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:fe939df4583692f0512161ec1c880e0a10e71e6a232da045ab8edd3756fbadf0\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==0.2.2\\\"\\n\\\n        },\\n\\\n        \\\"grpcio\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:03b78b4e7dcdfe3e257bb528cc93923f9cbbab6d5babf15a60d21e9a4a70b1a2\\\",\\n\\\n                \\\"sha256:1ce0ccfbdfe84387dbcbf44adb4ae16ec7ae70e166ffab478993eb1ea1cba3ce\\\",\\n\\\n                \\\"sha256:22e167a9406d73dd19ffe8ed6a485f17e6eac82505be8c108897f15e68badcbb\\\",\\n\\\n                \\\"sha256:31d0aeca8d8ee2301c62c5c340e0889d653b1280d68f9fa203982cb6337b050e\\\",\\n\\\n                \\\"sha256:44c7f99ca17ebbcc96fc54ed00b454d8313f1eac28c563098d8b901025aff941\\\",\\n\\\n                \\\"sha256:5471444f53f9db6a1f1f11f5dbc173228881df8446380b6b98f90afb8fd8348e\\\",\\n\\\n                \\\"sha256:561bca3b1bde6d6564306eb05848fd155136e9c3a25d2961129b1e2edba22fce\\\",\\n\\\n                \\\"sha256:5bf58e1d2c2f55365c06e8cb5abe067b88ca2e5550fb62009c41df4b54505acf\\\",\\n\\\n                \\\"sha256:6b7163d1e85d76b0815df63fcc310daec02b44532bb433f743142d4febcb181f\\\",\\n\\\n                \\\"sha256:766d79cddad95f5f6020037fe60ea8b98578afdf0c59d5a60c106c1bdd886303\\\",\\n\\\n                \\\"sha256:770b7372d5ca68308ff66d7baee53369fa5ce985f84bcb6aa1948c1f2f7b02f2\\\",\\n\\\n                \\\"sha256:7ab178da777fc0f55b6aef5a755f99726e8e4b75e3903954df07b27059b54fcf\\\",\\n\\\n                \\\"sha256:8078305e77c2f6649d36b24d8778096413e474d9d7892c6f92cfb589c9d71b2e\\\",\\n\\\n                \\\"sha256:85600b63a386d860eeaa955e9335e18dd0d7e5477e9214825abf2c2884488369\\\",\\n\\\n                \\\"sha256:857d9b939ae128be1c0c792eb885c7ff6a386b9dea899ac4b06f4d90a31f9d87\\\",\\n\\\n                \\\"sha256:87a41630c90c179fa5c593400f30a467c498972c702f348d41e19dafeb1d319e\\\",\\n\\\n                \\\"sha256:8805d486c6128cc0fcc8ecf16c4095d99a8693a541ef851429ab334e028a4a97\\\",\\n\\\n                \\\"sha256:8d71b7a89c306a41ccc7741fc9409b14f5b86727455c2a1c0c7cfcb0f784e1f2\\\",\\n\\\n                \\\"sha256:9e1b80bd65f8f160880cb4dad7f55697f6d37b2d7f251fc0c2128e811928f369\\\",\\n\\\n                \\\"sha256:9e290c84a145ae2411ee0ec9913c41cd7500e2e7485fe93632434d84ef4fda67\\\",\\n\\\n                \\\"sha256:9ec9f88b5bc94bd99372f27cdd53af1c92ba06717380b127733b953cfb181174\\\",\\n\\\n                \\\"sha256:a0a02a8b4ba6deadf706d5f849539b3685b72b186a3c9ef5d43e8972ed60fb6f\\\",\\n\\\n                \\\"sha256:a4059c59519f5940e01a071f74ae2a60ea8f6185b03d22a09d40c7959a36b16b\\\",\\n\\\n                \\\"sha256:a6e028c2a6da2ebfa2365a5b32531d311fbfec0e3600fc27e901b64f0ff7e54e\\\",\\n\\\n                \\\"sha256:adcdebf9f8463df4120c427cf6c9aed39258bccd03ed37b6939e7a145d64d6e0\\\",\\n\\\n                \\\"sha256:bdec982610259d07156a58f80b8c3e69be7751a9208bc577b059c5193d087fad\\\",\\n\\\n                \\\"sha256:cefc4d4251ffb73feb303d4b7e9d6c367cb60f2db16d259ea28b114045f965aa\\\",\\n\\\n                \\\"sha256:d4145c8aa6afbac10ad27e408f7ce15992fe89ba5d0b4abca31c0c2729864c03\\\",\\n\\\n                \\\"sha256:da76dc5ad719ee99de5ea28a5629ff92172cbb4a70d8a6ae3a5b7a53c7382ce1\\\",\\n\\\n                \\\"sha256:dde2452c08ef8b6426ccab6b5b6de9f06d836d9937d6870e68153cbf8cb49348\\\",\\n\\\n                \\\"sha256:e3d88091d2539a4868750914a6fe7b9ec50e42b913851fc1b77423b5bd918530\\\",\\n\\\n                \\\"sha256:f9c67cfe6278499d7f83559dc6322a8bbb108e307817a3d7acbfea807b3603cc\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.22.0\\\"\\n\\\n        },\\n\\\n        \\\"h5py\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:05750b91640273c69989c657eaac34b091abdd75efc8c4824c82aaf898a2da0a\\\",\\n\\\n                \\\"sha256:082a27208aa3a2286e7272e998e7e225b2a7d4b7821bd840aebf96d50977abbb\\\",\\n\\\n                \\\"sha256:08e2e8297195f9e813e894b6c63f79372582787795bba2014a2db6a2de95f713\\\",\\n\\\n                \\\"sha256:0dd2adeb2e9de5081eb8dcec88874e7fd35dae9a21557be3a55a3c7d491842a4\\\",\\n\\\n                \\\"sha256:0f94de7a10562b991967a66bbe6dda9808e18088676834c0a4dcec3fdd3bcc6f\\\",\\n\\\n                \\\"sha256:106e42e2e01e486a3d32eeb9ba0e3a7f65c12fa8998d63625fa41fb8bdc44cdb\\\",\\n\\\n                \\\"sha256:1606c66015f04719c41a9863c156fc0e6b992150de21c067444bcb82e7d75579\\\",\\n\\\n                \\\"sha256:1854c4beff9961e477e133143c5e5e355dac0b3ebf19c52cf7cc1b1ef757703c\\\",\\n\\\n                \\\"sha256:1e9fb6f1746500ea91a00193ce2361803c70c6b13f10aae9a33ad7b5bd28e800\\\",\\n\\\n                \\\"sha256:2cca17e80ddb151894333377675db90cd0279fa454776e0a4f74308376afd050\\\",\\n\\\n                \\\"sha256:30e365e8408759db3778c361f1e4e0fe8e98a875185ae46c795a85e9bafb9cdf\\\",\\n\\\n                \\\"sha256:3206bac900e16eda81687d787086f4ffd4f3854980d798e191a9868a6510c3ae\\\",\\n\\\n                \\\"sha256:3c23d72058647cee19b30452acc7895621e2de0a0bd5b8a1e34204b9ea9ed43c\\\",\\n\\\n                \\\"sha256:407b5f911a83daa285bbf1ef78a9909ee5957f257d3524b8606be37e8643c5f0\\\",\\n\\\n                \\\"sha256:4162953714a9212d373ac953c10e3329f1e830d3c7473f2a2e4f25dd6241eef0\\\",\\n\\\n                \\\"sha256:5fc7aba72a51b2c80605eba1c50dbf84224dcd206279d30a75c154e5652e1fe4\\\",\\n\\\n                \\\"sha256:713ac19307e11de4d9833af0c4bd6778bde0a3d967cafd2f0f347223711c1e31\\\",\\n\\\n                \\\"sha256:71b946d80ef3c3f12db157d7778b1fe74a517ca85e94809358b15580983c2ce2\\\",\\n\\\n                \\\"sha256:8cc4aed71e20d87e0a6f02094d718a95252f11f8ed143bc112d22167f08d4040\\\",\\n\\\n                \\\"sha256:9d41ca62daf36d6b6515ab8765e4c8c4388ee18e2a665701fef2b41563821002\\\",\\n\\\n                \\\"sha256:a744e13b000f234cd5a5b2a1f95816b819027c57f385da54ad2b7da1adace2f3\\\",\\n\\\n                \\\"sha256:b087ee01396c4b34e9dc41e3a6a0442158206d383c19c7d0396d52067b17c1cb\\\",\\n\\\n                \\\"sha256:b0f03af381d33306ce67d18275b61acb4ca111ced645381387a02c8a5ee1b796\\\",\\n\\\n                \\\"sha256:b9e4b8dfd587365bdd719ae178fa1b6c1231f81280b1375eef8626dfd8761bf3\\\",\\n\\\n                \\\"sha256:c5dd4ec75985b99166c045909e10f0534704d102848b1d9f0992720e908928e7\\\",\\n\\\n                \\\"sha256:d2b82f23cd862a9d05108fe99967e9edfa95c136f532a71cb3d28dc252771f50\\\",\\n\\\n                \\\"sha256:e58a25764472af07b7e1c4b10b0179c8ea726446c7141076286e41891bf3a563\\\",\\n\\\n                \\\"sha256:f3b49107fbfc77333fc2b1ef4d5de2abcd57e7ea3a1482455229494cf2da56ce\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==2.9.0\\\"\\n\\\n        },\\n\\\n        \\\"keras-applications\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:5579f9a12bcde9748f4a12233925a59b93b73ae6947409ff34aa2ba258189fe5\\\",\\n\\\n                \\\"sha256:df4323692b8c1174af821bf906f1e442e63fa7589bf0f1230a0b6bdc5a810c95\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.0.8\\\"\\n\\\n        },\\n\\\n        \\\"keras-preprocessing\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:44aee5f2c4d80c3b29f208359fcb336df80f293a0bb6b1c738da43ca206656fb\\\",\\n\\\n                \\\"sha256:5a8debe01d840de93d49e05ccf1c9b81ae30e210d34dacbcc47aeb3049b528e5\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.1.0\\\"\\n\\\n        },\\n\\\n        \\\"markdown\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:2e50876bcdd74517e7b71f3e7a76102050edec255b3983403f1a63e7c8a41e7a\\\",\\n\\\n                \\\"sha256:56a46ac655704b91e5b7e6326ce43d5ef72411376588afa1dd90e881b83c7e8c\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==3.1.1\\\"\\n\\\n        },\\n\\\n        \\\"mock\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:83657d894c90d5681d62155c82bda9c1187827525880eda8ff5df4ec813437c3\\\",\\n\\\n                \\\"sha256:d157e52d4e5b938c550f39eb2fd15610db062441a9c2747d3dbfa9298211d0f8\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==3.0.5\\\"\\n\\\n        },\\n\\\n        \\\"numpy\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:03e311b0a4c9f5755da7d52161280c6a78406c7be5c5cc7facfbcebb641efb7e\\\",\\n\\\n                \\\"sha256:0cdd229a53d2720d21175012ab0599665f8c9588b3b8ffa6095dd7b90f0691dd\\\",\\n\\\n                \\\"sha256:312bb18e95218bedc3563f26fcc9c1c6bfaaf9d453d15942c0839acdd7e4c473\\\",\\n\\\n                \\\"sha256:464b1c48baf49e8505b1bb754c47a013d2c305c5b14269b5c85ea0625b6a988a\\\",\\n\\\n                \\\"sha256:5adfde7bd3ee4864536e230bcab1c673f866736698724d5d28c11a4d63672658\\\",\\n\\\n                \\\"sha256:7724e9e31ee72389d522b88c0d4201f24edc34277999701ccd4a5392e7d8af61\\\",\\n\\\n                \\\"sha256:8d36f7c53ae741e23f54793ffefb2912340b800476eb0a831c6eb602e204c5c4\\\",\\n\\\n                \\\"sha256:910d2272403c2ea8a52d9159827dc9f7c27fb4b263749dca884e2e4a8af3b302\\\",\\n\\\n                \\\"sha256:951fefe2fb73f84c620bec4e001e80a80ddaa1b84dce244ded7f1e0cbe0ed34a\\\",\\n\\\n                \\\"sha256:9588c6b4157f493edeb9378788dcd02cb9e6a6aeaa518b511a1c79d06cbd8094\\\",\\n\\\n                \\\"sha256:9ce8300950f2f1d29d0e49c28ebfff0d2f1e2a7444830fbb0b913c7c08f31511\\\",\\n\\\n                \\\"sha256:be39cca66cc6806652da97103605c7b65ee4442c638f04ff064a7efd9a81d50a\\\",\\n\\\n                \\\"sha256:c3ab2d835b95ccb59d11dfcd56eb0480daea57cdf95d686d22eff35584bc4554\\\",\\n\\\n                \\\"sha256:eb0fc4a492cb896346c9e2c7a22eae3e766d407df3eb20f4ce027f23f76e4c54\\\",\\n\\\n                \\\"sha256:ec0c56eae6cee6299f41e780a0280318a93db519bbb2906103c43f3e2be1206c\\\",\\n\\\n                \\\"sha256:f4e4612de60a4f1c4d06c8c2857cdcb2b8b5289189a12053f37d3f41f06c60d0\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.17.0\\\"\\n\\\n        },\\n\\\n        \\\"protobuf\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:00a1b0b352dc7c809749526d1688a64b62ea400c5b05416f93cfb1b11a036295\\\",\\n\\\n                \\\"sha256:01acbca2d2c8c3f7f235f1842440adbe01bbc379fa1cbdd80753801432b3fae9\\\",\\n\\\n                \\\"sha256:0a795bca65987b62d6b8a2d934aa317fd1a4d06a6dd4df36312f5b0ade44a8d9\\\",\\n\\\n                \\\"sha256:0ec035114213b6d6e7713987a759d762dd94e9f82284515b3b7331f34bfaec7f\\\",\\n\\\n                \\\"sha256:31b18e1434b4907cb0113e7a372cd4d92c047ce7ba0fa7ea66a404d6388ed2c1\\\",\\n\\\n                \\\"sha256:32a3abf79b0bef073c70656e86d5bd68a28a1fbb138429912c4fc07b9d426b07\\\",\\n\\\n                \\\"sha256:55f85b7808766e5e3f526818f5e2aeb5ba2edcc45bcccede46a3ccc19b569cb0\\\",\\n\\\n                \\\"sha256:64ab9bc971989cbdd648c102a96253fdf0202b0c38f15bd34759a8707bdd5f64\\\",\\n\\\n                \\\"sha256:64cf847e843a465b6c1ba90fb6c7f7844d54dbe9eb731e86a60981d03f5b2e6e\\\",\\n\\\n                \\\"sha256:afed9003d7f2be2c3df20f64220c30faec441073731511728a2cb4cab4cd46a6\\\",\\n\\\n                \\\"sha256:bf8e05d638b585d1752c5a84247134a0350d3a8b73d3632489a014a9f6f1e758\\\",\\n\\\n                \\\"sha256:de2760583ed28749ff885789c1cbc6c9c06d6de92fc825740ab99deb2f25ea4d\\\",\\n\\\n                \\\"sha256:eabc4cf1bc19689af8022ba52fd668564a8d96e0d08f3b4732d26a64255216a4\\\",\\n\\\n                \\\"sha256:fcff6086c86fb1628d94ea455c7b9de898afc50378042927a59df8065a79a549\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==3.9.1\\\"\\n\\\n        },\\n\\\n        \\\"six\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:3350809f0555b11f552448330d0b52d5f24c91a322ea4a15ef22629740f3761c\\\",\\n\\\n                \\\"sha256:d16a0141ec1a18405cd4ce8b4613101da75da0e9a7aec5bdd4fa804d0e0eba73\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.12.0\\\"\\n\\\n        },\\n\\\n        \\\"tensorboard\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:53d8f40589c903dae65f39a799c2bc49defae3703754984d90613d26ebd714a4\\\",\\n\\\n                \\\"sha256:b664fe7772be5670d8b04200342e681af7795a12cd752709aed565c06c0cc196\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.13.1\\\"\\n\\\n        },\\n\\\n        \\\"tensorflow\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:0de5887495c20e1130ae4d9bcfaf80cec87f579a9c27a84141a588a46e5aa853\\\",\\n\\\n                \\\"sha256:0f305f3c461ed2ce5e0b65fccc7b7452f483c7935dd8a52a466d622e642fdea8\\\",\\n\\\n                \\\"sha256:4325f20b5a703b80a5f7a8807f07ad8735025bd2a947093ffff1c26fbdc7980b\\\",\\n\\\n                \\\"sha256:4c86be0e476b64cedf4ffa059d71b764e75b895effb697345687e3057929a7b5\\\",\\n\\\n                \\\"sha256:6b0a0a413390302ce7c22c98695983d6fb8406861cfb418b25536f57a96c0b89\\\",\\n\\\n                \\\"sha256:77eec2351d0a9b5312ea01ee4c78c13996f249cf1bead2e68256a65e533f45ef\\\",\\n\\\n                \\\"sha256:87bf719a564f11d63e4f614e933e5a612dd4e67c88266b774236e0982f5fcf69\\\",\\n\\\n                \\\"sha256:ba29e66331cd2a8f824e0fa937ce44bd624bc37739f2f083694e473051d89ace\\\",\\n\\\n                \\\"sha256:bc374f5a662b6e164cd1c4da61ccc752ec208a44893d2f9dcf47d2a0a2cef311\\\",\\n\\\n                \\\"sha256:bcf86966b7554e407bb7d73341f2e108df62a910d40b4cd2a914867f2a5de51c\\\",\\n\\\n                \\\"sha256:c3abffd51c168cfd62a557243c47a29ab48deb52a64465e6818060f20755ddb4\\\",\\n\\\n                \\\"sha256:c41862c65628261229db22e33f9e570d845eeb5cea66dcbaebe404405edaa69b\\\",\\n\\\n                \\\"sha256:d7341617aedd73c2c847755e87697e9c19eb625c73da26d6cd669220c5565119\\\",\\n\\\n                \\\"sha256:de0425b58cb34006e4500565239b4c3a3055b95bff132f097fa46c87d8e463c9\\\",\\n\\\n                \\\"sha256:f21fb65c8e874f40c654bc9b3ff3db3ec26f98f03fe64a541bc768f6f5c52ac2\\\"\\n\\\n            ],\\n\\\n            \\\"index\\\": \\\"pypi-org\\\",\\n\\\n            \\\"version\\\": \\\"==1.13.1\\\"\\n\\\n        },\\n\\\n        \\\"tensorflow-estimator\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:7cfdaa3e83e3532f31713713feb98be7ea9f3065722be4267e49b6c301271419\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.13.0\\\"\\n\\\n        },\\n\\\n        \\\"termcolor\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:1d6d69ce66211143803fbc56652b41d73b4a400a2891d7bf7a1cdf4c02de613b\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==1.1.0\\\"\\n\\\n        },\\n\\\n        \\\"werkzeug\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:87ae4e5b5366da2347eb3116c0e6c681a0e939a33b2805e2c0cbd282664932c4\\\",\\n\\\n                \\\"sha256:a13b74dd3c45f758d4ebdb224be8f1ab8ef58b3c0ffc1783a8c7d9f4f50227e6\\\"\\n\\\n            ],\\n\\\n            \\\"version\\\": \\\"==0.15.5\\\"\\n\\\n        },\\n\\\n        \\\"wheel\\\": {\\n\\\n            \\\"hashes\\\": [\\n\\\n                \\\"sha256:5e79117472686ac0c4aef5bad5172ea73a1c2d1646b808c35926bd26bdfb0c08\\\",\\n\\\n                \\\"sha256:62fcfa03d45b5b722539ccbc07b190e4bfff4bb9e3a4d470dd9f6a0981002565\\\"\\n\\\n            ],\\n\\\n            \\\"markers\\\": \\\"python_version >= ''3''\\\",\\n\\\n            \\\"version\\\": \\\"==0.33.4\\\"\\n\\\n        }\\n\\\n    },\\n\\\n    \\\"develop\\\": {}\\n\\\n}\" >\"/home/amun/Pipfile.lock\"\n\nRUN echo -e \"\\n\\\n[global]\\n\\\ntrusted-host = tensorflow.pypi.thoth-station.ninja\\n\\\n\" >\"/etc/pip.conf\"\n\nRUN cd /home/amun && pipenv install --deploy\n\nRUN echo -e \"#!/usr/bin/env python3\\n\\\n\\n\\\n# Copyright 2018 Jason Zaman <jason AT perfinion.com> 2018\\n\\\n# Licensed under Apache-2\\n\\\n#\\n\\\n# Additional changes for project Thoth by Thoth team.\\n\\\n#\\n\\\n\\n\\\nimport logging\\n\\\nimport os\\n\\\nimport sys\\n\\\nimport numpy as np\\n\\\nimport json\\n\\\nimport tensorflow as tf\\n\\\nfrom timeit import time\\n\\\n\\n\\\n_LOGGER = logging.getLogger(__name__)\\n\\\n\\n\\\n\\n\\\n# Datatype used.\\n\\\n# Options:\\n\\\n#   float16\\n\\\n#   float32\\n\\\n#   float64\\n\\\n#   int32\\n\\\n_ARGS_DTYPE = os.getenv(''MATMUL_DTYPE'', ''float32'')\\n\\\nif _ARGS_DTYPE not in (''float16'', ''float32'', ''float64'', ''int32''):\\n\\\n    raise ValueError(\\\"Unknown MATMUL_DTYPE\\\")\\n\\\nprint(\\\"DTYPE set to %s\\\" % _ARGS_DTYPE, file=sys.stderr)\\n\\\n\\n\\\n# Run on CPU or GPU.\\n\\\n# Options:\\n\\\n#   cpu\\n\\\n#   gpu\\n\\\n_ARGS_DEVICE = os.getenv(''MATMUL_DEVICE'', ''cpu'')\\n\\\nprint(\\\"DEVICE set to %s\\\" % _ARGS_DEVICE, file=sys.stderr)\\n\\\n\\n\\\n# Number of repetitions.\\n\\\n# Options:\\n\\\n#   A positive integer.\\n\\\n_ARGS_REPS = int(os.getenv(''MATMUL_REPS'', 4000))\\n\\\nprint(\\\"REPS set to %s\\\" % _ARGS_REPS, file=sys.stderr)\\n\\\n\\n\\\n# Size of matrix.\\n\\\n# Options:\\n\\\n#   A positive integer.\\n\\\n_ARGS_MATRIX_SIZE = int(os.getenv(''MATMUL_MATRIX_SIZE'', 512))\\n\\\nprint(\\\"MATRIX size set to %s\\\" % _ARGS_MATRIX_SIZE, file=sys.stderr)\\n\\\n\\n\\\nos.environ[''TF_CPP_MIN_LOG_LEVEL''] = ''3''\\n\\\nif _ARGS_DEVICE == ''cpu'':\\n\\\n    os.environ[''CUDA_VISIBLE_DEVICES''] = ''-1''\\n\\\n\\n\\\n\\n\\\ndef _get_aicoe_tensorflow_build_info():\\n\\\n    \\\"\\\"\\\"Try to obtain information of AICoE TensorFlow builds.\\n\\\n\\n\\\n    Do whatever is needed in this function, if there is an error, the reported build information is\\n\\\n    set to None (e.g. AICoE TensorFlow is not installed and such).\\n\\\n    \\\"\\\"\\\"\\n\\\n    try:\\n\\\n        path = os.path.dirname(os.path.dirname(tf.__file__))\\n\\\n        build_info_path = os.path.join(path, ''tensorflow-'' + tf.__version__ + ''.dist-info'', ''build_info.json'')\\n\\\n        with open(build_info_path, ''r'') as build_info_file:\\n\\\n            build_info = json.load(build_info_file)\\n\\\n        return build_info\\n\\\n    except Exception:\\n\\\n        _LOGGER.exception(\\\"Failed to obtain AICoE specific build information for TensorFlow\\\")\\n\\\n\\n\\\n    return None\\n\\\n\\n\\\n\\n\\\ndef bench(n):\\n\\\n    tf.reset_default_graph()\\n\\\n    with tf.device(\\\"/%s:0\\\" % (_ARGS_DEVICE)):\\n\\\n        matrix1 = tf.Variable(tf.ones((n, n), dtype=_ARGS_DTYPE))\\n\\\n        matrix2 = tf.Variable(tf.ones((n, n), dtype=_ARGS_DTYPE))\\n\\\n        product = tf.matmul(matrix1, matrix2)\\n\\\n\\n\\\n    times = []\\n\\\n    config = tf.ConfigProto()\\n\\\n    with tf.Session(config=config) as sess:\\n\\\n        sess.run(tf.global_variables_initializer())\\n\\\n        # warmup\\n\\\n        sess.run(product.op)\\n\\\n\\n\\\n        for i in range(_ARGS_REPS):\\n\\\n            start = time.time()\\n\\\n            sess.run(product.op)\\n\\\n            times.append(time.time() - start)\\n\\\n\\n\\\n    times_ms = 1000 * np.array(times)  # in seconds, convert to ms\\n\\\n    elapsed_ms = np.median(times_ms)\\n\\\n\\n\\\n    ops = n ** 3 + (n - 1) * n ** 2  # n^2*(n-1) additions, n^3 multiplications\\n\\\n    rate = ops / elapsed_ms / 10 ** 6  # in GFLOPS. (/ milli / 10**6) == (/ 10 ** 9)\\n\\\n    print(''%d x %d matmul took:   \\t%.4f ms,\\t %.2f GFLOPS'' % (n, n, elapsed_ms, rate,), file=sys.stderr)\\n\\\n    return rate, elapsed_ms\\n\\\n\\n\\\n\\n\\\ndef main():\\n\\\n    np.set_printoptions(suppress=True)\\n\\\n    print(\\\"# Version: %s, path: %s\\\" % (tf.__version__, tf.__path__), file=sys.stderr)\\n\\\n\\n\\\n    rate, elapsed = bench(_ARGS_MATRIX_SIZE)\\n\\\n\\n\\\n    result = {\\n\\\n        \\\"framework\\\": \\\"tensorflow\\\",\\n\\\n        \\\"name\\\": \\\"PiMatmul\\\",\\n\\\n        \\\"@parameters\\\": {\\n\\\n            \\\"dtype\\\": _ARGS_DTYPE,\\n\\\n            \\\"device\\\": _ARGS_DEVICE,\\n\\\n            \\\"reps\\\": _ARGS_REPS,\\n\\\n            \\\"matrix_size\\\": _ARGS_MATRIX_SIZE,\\n\\\n        },\\n\\\n        \\\"@result\\\": {\\n\\\n            \\\"rate\\\": rate,\\n\\\n            \\\"elapsed\\\": elapsed,\\n\\\n        },\\n\\\n        \\\"tensorflow_buildinfo\\\": _get_aicoe_tensorflow_build_info()\\n\\\n    }\\n\\\n    json.dump(result, sys.stdout, indent=2)\\n\\\n\\n\\\n\\n\\\nif __name__ == ''__main__'':\\n\\\n    main()\\n\\\n\" >\"/home/amun/script\"\n\nRUN echo -e \"#!/usr/bin/env python3\\n\\\n# Amun\\n\\\n# Copyright(C) 2018, 2019 Fridolin Pokorny\\n\\\n#\\n\\\n# This program is free software: you can redistribute it and / or modify\\n\\\n# it under the terms of the GNU General Public License as published by\\n\\\n# the Free Software Foundation, either version 3 of the License, or\\n\\\n# (at your option) any later version.\\n\\\n#\\n\\\n# This program is distributed in the hope that it will be useful,\\n\\\n# but WITHOUT ANY WARRANTY without even the implied warranty of\\n\\\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n\\\n# GNU General Public License for more details.\\n\\\n#\\n\\\n# You should have received a copy of the GNU General Public License\\n\\\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\\n\\\n\\n\\\n\\\"\\\"\\\"This file is run by an inspection pod to gather runtime information.\\n\\\n\\n\\\nThis script should not use any external libraries except for Python''s standard\\n\\\nlibrary. It acts as wrapper around user supplied script and prints command\\n\\\nresults to stdout as a JSON. It also aggregates information from hwinfo\\n\\\ninit-container aggregating hardware information.\\n\\\n\\\"\\\"\\\"\\n\\\n\\n\\\nimport os\\n\\\nimport resource\\n\\\nimport json\\n\\\nimport subprocess\\n\\\nimport hashlib\\n\\\nimport sys\\n\\\nfrom datetime import datetime\\n\\\n\\n\\\n\\n\\\n# A path to file containing hardware information as gathered by init-container\\n\\\n# amun-hwinfo.\\n\\\n_HWINFO_FILE = \\\"/home/amun/hwinfo/info.json\\\"\\n\\\n# We use a file for stdout and stderr not to block on pipe.\\n\\\n_EXEC_STDOUT_FILE = \\\"/home/amun/script.stdout\\\"\\n\\\n_EXEC_STDERR_FILE = \\\"/home/amun/script.stderr\\\"\\n\\\n# Executable to be run.\\n\\\n_EXEC_FILE = \\\"/home/amun/script\\\"\\n\\\n# Names of items on certain position in return value of resource.getrusage()\\n\\\n#   https://docs.python.org/3.6/library/resource.html#resource.getrusage\\n\\\n_RESOURCE_STRUCT_RUSAGE_ITEMS = (\\n\\\n    \\\"ru_utime\\\",\\n\\\n    \\\"ru_stime\\\",\\n\\\n    \\\"ru_maxrss\\\",\\n\\\n    \\\"ru_ixrss\\\",\\n\\\n    \\\"ru_idrss\\\",\\n\\\n    \\\"ru_isrss\\\",\\n\\\n    \\\"ru_minflt\\\",\\n\\\n    \\\"ru_majflt\\\",\\n\\\n    \\\"ru_nswap\\\",\\n\\\n    \\\"ru_inblock\\\",\\n\\\n    \\\"ru_oublock\\\",\\n\\\n    \\\"ru_msgsnd\\\",\\n\\\n    \\\"ru_msgrcv\\\",\\n\\\n    \\\"ru_nsignals\\\",\\n\\\n    \\\"ru_nvcsw\\\",\\n\\\n    \\\"ru_nivcsw\\\",\\n\\\n)\\n\\\n\\n\\\n\\n\\\ndef main():\\n\\\n    \\\"\\\"\\\"Entrypoint for inspection container.\\\"\\\"\\\"\\n\\\n    # Load hardware info.\\n\\\n    hwinfo = None\\n\\\n    with open(_HWINFO_FILE, \\\"r\\\") as hwinfo_file:\\n\\\n        hwinfo = json.load(hwinfo_file)\\n\\\n\\n\\\n    # Execute the supplied script.\\n\\\n    args = [\\\"pipenv\\\", \\\"run\\\", _EXEC_FILE]\\n\\\n    with open(_EXEC_STDOUT_FILE, \\\"w\\\") as stdout_file, open(_EXEC_STDERR_FILE, \\\"w\\\") as stderr_file:\\n\\\n        process = subprocess.Popen(args, stdout=stdout_file, stderr=stderr_file, universal_newlines=True)\\n\\\n\\n\\\n    process.communicate()\\n\\\n\\n\\\n    usage_info = resource.getrusage(resource.RUSAGE_CHILDREN)\\n\\\n\\n\\\n    usage = {}\\n\\\n    for idx in range(len(_RESOURCE_STRUCT_RUSAGE_ITEMS)):\\n\\\n        usage[_RESOURCE_STRUCT_RUSAGE_ITEMS[idx]] = usage_info[idx]\\n\\\n\\n\\\n    # Load stdout and stderr.\\n\\\n    with open(_EXEC_STDOUT_FILE, \\\"r\\\") as stdout_file:\\n\\\n        stdout = stdout_file.read()\\n\\\n        try:\\n\\\n            stdout = json.loads(str(stdout))\\n\\\n        except Exception:\\n\\\n            # We were not able to load JSON, pass string as output.\\n\\\n            pass\\n\\\n\\n\\\n    with open(_EXEC_STDERR_FILE, \\\"r\\\") as stderr_file:\\n\\\n        stderr = stderr_file.read()\\n\\\n\\n\\\n    # Compute script SHA-256.\\n\\\n    sha256 = hashlib.sha256()\\n\\\n    with open(_EXEC_FILE, \\\"rb\\\") as script_file:\\n\\\n        while True:\\n\\\n            data = script_file.read(65536)\\n\\\n            if not data:\\n\\\n                break\\n\\\n\\n\\\n            sha256.update(data)\\n\\\n\\n\\\n    # Name return code as exit_code to be consistent in Thoth.\\n\\\n    report = {\\n\\\n        \\\"hwinfo\\\": hwinfo,\\n\\\n        \\\"stdout\\\": stdout or {},\\n\\\n        \\\"stderr\\\": stderr,\\n\\\n        \\\"exit_code\\\": process.returncode,\\n\\\n        \\\"script_sha256\\\": sha256.hexdigest(),\\n\\\n        \\\"usage\\\": usage,\\n\\\n        \\\"datetime\\\": datetime.utcnow().strftime(\\\"%Y-%m-%dT%H:%M:%S.%f\\\"),\\n\\\n    }\\n\\\n\\n\\\n    json.dump(report, sys.stdout, sort_keys=True, indent=2)\\n\\\n    sys.exit(report[\\\"exit_code\\\"])\\n\\\n\\n\\\n\\n\\\nif __name__ == \\\"__main__\\\":\\n\\\n    main()\\n\\\n\" >\"/home/amun/entrypoint\"\nRUN chmod a+x /home/amun/script /home/amun/entrypoint && touch /home/amun/script.stderr /home/amun/script.stdout && chmod 777 /home/amun/script.stderr /home/amun/script.stdout\nCMD [\"/home/amun/entrypoint\"]\nUSER 1042\nWORKDIR /home/amun'
      parameters:
      - name: specification
    outputs:
      artifacts:
        - name: dockerfile
          path: "/tmp/Dockerfile"
      parameters:
        - name: dockerfile
          valueFrom:
            path: "/tmp/Dockerfile"
          globalName: dockerfile
    script:
      image: "python:alpine3.6"
      command: [python]
      source: |
        # Mock Dockerfile creation
        import json
        from pathlib import Path

        specification = ...

        with open("/tmp/Dockerfile", "w") as f:
          ...  # TODO: create  Dockerfile
          dockerfile = Path("/tmp/Dockerfile.mock").read_text()
          f.write(dockerfile)

  - name: create-imagestream
    inputs:
      parameters:
      - name: inspection-id
    resource:
      action: create
      manifest: |
        apiVersion: image.openshift.io/v1
        kind: ImageStream
        metadata:
          labels:
            app: amun
            component: amun-inspection-imagestream
            mark: cleanup
          name: "{{inputs.parameters.inspection-id}}"
          ownerReferences:
          - apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            name: "{{workflow.name}}"
            uid: "{{workflow.uid}}"
        spec:
          name: latest
          lookupPolicy:
            local: true

  - name: create-buildconfig
    inputs:
      parameters:
      - name: inspection-id
      - name: specification
      - name: dockerfile
      - name: cpu
      - name: memory
    resource:
      action: create
      manifest: |
        kind: BuildConfig
        apiVersion: build.openshift.io/v1
        metadata:
          name: "{{workflow.parameters.inspection-id}}"
          labels:
            app: amun
            component: amun-inspection-buildconfig
            workflow: "{{workflow.name}}"
            mark: cleanup
          annotations:
            amun_specification: '{{inputs.parameters.specification}}'
          ownerReferences:
          - apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            name: "{{workflow.name}}"
            uid: "{{workflow.uid}}"
        spec:
          output:
            to:
              kind: ImageStreamTag
              name: "{{inputs.parameters.inspection-id}}:latest"
          source:
            type: Dockerfile
            dockerfile: "{{inputs.parameters.dockerfile}}"
          resources:
            limits:
              memory: "{{inputs.parameters.memory}}"
              cpu: "{{inputs.parameters.cpu}}"
            requests:
              memory: "{{inputs.parameters.memory}}"
              cpu: "{{inputs.parameters.cpu}}"
          strategy:
            type: Docker
            dockerStrategy:
              env:
                - name: LANG
                  value: 'en_US.UTF-8'
                - name: HOME
                  value: '/home/amun/'
                - name: PIPENV_CACHE_DIR
                  value: '/home/amun/.cache'
                - name: PIPENV_COLORBLIND
                  value: '1'
                - name: PIPENV_HIDE_EMOJIS
                  value: '1'
                - name: PIPENV_NOSPIN
                  value: '1'
                - name: PIPENV_VERBOSITY
                  value: '1'
          triggers:
            - type: ConfigChange

  - name: await-build
    inputs:
      parameters:
      - name: inspection-id
    resource:
      action: get
      successCondition: status.phase == Complete
      failureCondition: status.phase == Failed
      manifest: |
        apiVersion: "build.openshift.io/v1"
        kind: "Build"
        metadata:
          name: "{{inputs.parameters.inspection-id}}-1"
